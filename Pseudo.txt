Notes:
Order of classes:
Main (entry point)
Engine 
Core utilities (window, renderer, etc.)
SceneObject + subclasses
Math helpers


TODO:
- create the loop and function structure
- 



 
****Pseudo code:****

import stuff

//entry point
Main {
    main(String[] args) {
        Engine engine = new Engine();
        engine.start();
    }
}


Engine {
    private Window window;
    private Renderer renderer;
    private InputManager input;
    private boolean running;
    private final int TARGET_FPS = 60;

    public void start() {

    }
}






////////
class ShapeDrawing extends JComponent {
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.drawRect(100, 150, 60, 100);
        
        int x[] = {200, 250, 210};
        int y[] = {100, 80, 150};
        int numPoints = 3;
        g.setColor(Color.ORANGE);
        g.fillPolygon(x,y,numPoints);
        g.setColor(Color.BLACK);
        g.drawPolygon(x, y, numPoints);
        


    }
}

public class Main {
    public static void main(String[] args){
        JFrame frame = new JFrame("My Swing Window");
        frame.setSize(400, 300); // 400 pixels wide, 300 pixels high
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new ShapeDrawing());
        frame.setVisible(true);

        // Graphics.drawPolygon(new int[] {10, 20, 30}, new int[] {100, 20, 100}, 3);
    } 
}





****Major Systems:****

1. Main Program (engine)
    sets up the window, starts the game loop, handles input and calling other functions

2. Renderer 
    handles drawing everything onto the screen, should be made to be as plug-n-play as possible for easy use by the main program. Eventually will need a way of making this work through a "Camera" object.

3. Scene / scene objects
    the objects in the world, with all of their data (shapes(location, rotation, scale, mesh data, texture data), camera(location, rotation, fov, culling), etc.)


============

****Classes needed:****

Vector 3
    float x, y, z

    Vector Math methods: add, subtract, dot, cross, normalize

Matrix4x4
    float[][] m = new float[4][4];

    Matrix math methods: multiply, transform, identity, perspective, etc.

Vertex
    Vector3 position
    visible
    size, color

Triangle
    Vertex v1, v2, v3

    methods for backface culling

Mesh
    List<Triangle> triangles

    maybe a static method to create cube, sphere, other primitives.

Camera
    Vector3 position
    Vector3 rotation //yaw, pitch, roll
    float fov, aspectRatio, near, far
    
    //I need to learn how these work, but I know these exist and are important
    Matrix4x4 getViewMatrix();
    Matrix 4x4 getProjectionMatrix();

Renderer
    Camera camera
    List<Mesh> sceneObjects

    methods:
    render(Graphics2D g)
    void projectAndDraw(Triangle tri, Graphics2D g)



****View Layer (using Swing)****

RenderPanel extends JPanel
    Renderer renderer

    @Override
    protected void paintComponent(Graphics g) 
        super.paintComponent(g)
        renderer.render((Graphics2D), g)



****Controller Loop****

Engine
    JFrame window
    RenderPanel panel
    Renderer renderer

    start()
        call setupWindow() or something
        gameLoop();
    
    gameLoop()
        while (running) {
            update() //update camera, handle input
            panel.repaint() //triggers render
            sleep(frameDelay)
        }


